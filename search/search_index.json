{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DreamWall Picker","text":"<p>DreamWall Picker is a free and open source animation picker for Autodesk's Maya.</p> <p>Authors: Lionel Brouy\u00e8re, Olivier Evers</p> <p>This tool is a fork of Hotbox Designer (Lionel Brouy\u00e8re). A menus, markmenu and hotbox designer cross DCC. https://github.com/luckylyk/hotbox_designer</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Support from Maya 2018 to 2025</li> <li>Fast, ergonomic and straigh-forward designer canvas.</li> <li>Highly customizable buttons.</li> <li>Multiple backgrounds.</li> <li>Custom vectorial shapes.</li> <li>Display layers.</li> <li>Multiple splited viewports.</li> <li>Screen space or world space buttons.</li> <li>Configurable right click menu.</li> <li>Command scripts in Python and Mel.</li> <li>Import AnimSchool pickers done before 2022.</li> <li>Simplifyed installation.</li> <li>Store picker in maya scene and editable in every scene.</li> </ul>"},{"location":"#history","title":"History","text":"<p>2021, Christmas is approaching, and the cold is setting in. Suddenly, a decision from afar\u2014quite strange from a commercial perspective\u2014puts us in a tough spot. We learn that we\u2019re about to lose access to over 200 pickers used in our productions. A hundred animators, both in-house and at our partners, are going to be stuck.</p> <p>We rolled up our sleeves in a rush and quickly coded a solution to keep things running. It turns out that many other studios found themselves in the same situation.</p> <p>To ensure this situation could never happen again, we simply decided to make our work available to all animators worldwide under an Open Source and free license, guaranteeing that the tool will always be available for free.</p> <p>Enjoy ! ;D</p>"},{"location":"#who-dreamwall-studio","title":"Who DreamWall Studio ?","text":"<p>DreamWall is an animation studio located in Charleroi, Belgium, operating for more than 15 years. The studio specializes in producing 2D and 3D animated content for television, film, and digital platforms. DreamWall collaborates on projects for clients both in Belgium and internationally.</p>"},{"location":"api/","title":"<code>dwpicker</code> Module","text":""},{"location":"api/#overview","title":"Overview","text":"<p>This module provides functionality for managing and interacting with the DwPicker tool in Autodesk Maya. DwPicker allows users to work with pickers for organizing and controlling elements within a scene.</p>"},{"location":"api/#core-functions","title":"Core Functions","text":""},{"location":"api/#show","title":"<code>show</code>","text":"<pre><code>def show(\n    editable=True,\n    pickers=None,\n    ignore_scene_pickers=False,\n    replace_namespace_function=None,\n    list_namespaces_function=None):\n</code></pre> <p>Description: Displays the DwPicker UI, optionally loading pickers or customizing namespace behaviors.</p> <p>Arguments: - <code>editable</code> (bool): Allows local edits without affecting the original file. - <code>pickers</code> (list[str]): File paths to specific pickers to load. - <code>ignore_scene_pickers</code> (bool): Ignores existing scene pickers. - <code>replace_namespace_function</code> (callable): Custom namespace replacement function. - <code>list_namespaces_function</code> (callable): Custom function to list scene namespaces.</p> <p>Returns: - A <code>DwPicker</code> instance.</p>"},{"location":"api/#toggle","title":"<code>toggle</code>","text":"<pre><code>def toggle():\n</code></pre> <p>Description: Toggles the visibility of the DwPicker UI.</p>"},{"location":"api/#close","title":"<code>close</code>","text":"<pre><code>def close():\n</code></pre> <p>Description: Closes the DwPicker UI and unregisters all associated callbacks.</p>"},{"location":"api/#utility-classes","title":"Utility Classes","text":""},{"location":"api/#disable","title":"<code>disable</code>","text":"<pre><code>class disable():\n</code></pre> <p>Description: Context manager to temporarily disable picker callbacks, useful for preventing performance issues during batch operations.</p> <p>Methods: - <code>__enter__</code>: Unregisters callbacks. - <code>__exit__</code>: Re-registers callbacks.</p>"},{"location":"api/#additional-functions","title":"Additional Functions","text":""},{"location":"api/#current","title":"<code>current</code>","text":"<pre><code>def current():\n</code></pre> <p>Description: Retrieves the currently visible picker widget in the main tab.</p>"},{"location":"api/#refresh","title":"<code>refresh</code>","text":"<pre><code>def refresh():\n</code></pre> <p>Description: Refreshes the picker UI after manual changes to the scene data.</p>"},{"location":"api/#open_picker_file","title":"<code>open_picker_file</code>","text":"<pre><code>def open_picker_file(filepath):\n</code></pre> <p>Description: Programmatically adds a picker file to the DwPicker UI.</p> <p>Arguments: - <code>filepath</code> (str): Path to the picker file.</p>"},{"location":"api/#current_namespace","title":"<code>current_namespace</code>","text":"<pre><code>def current_namespace():\n</code></pre> <p>Description: Retrieves the namespace of the currently displayed picker.</p> <p>Returns: - A namespace string.</p>"},{"location":"api/#set_layer_visible","title":"<code>set_layer_visible</code>","text":"<pre><code>def set_layer_visible(layername, visible=True):\n</code></pre> <p>Description: Toggles the visibility of a specified layer in the current picker.</p> <p>Arguments: - <code>layername</code> (str): The name of the layer. - <code>visible</code> (bool): Visibility state (default is <code>True</code>).</p>"},{"location":"api/#toggle_layer_visibility","title":"<code>toggle_layer_visibility</code>","text":"<pre><code>def toggle_layer_visibility(layername):\n</code></pre> <p>Description: Toggles the visibility state of a specific layer in the current picker.</p> <p>Arguments: - <code>layername</code> (str): The name of the layer.</p>"},{"location":"api/#get_shape","title":"<code>get_shape</code>","text":"<pre><code>def get_shape(shape_id):\n</code></pre> <p>Description: Retrieves a specific shape from the picker by its ID.</p> <p>Arguments: - <code>shape_id</code> (str): The ID of the shape to retrieve.</p> <p>Returns: - The shape object if found, otherwise <code>None</code>.</p>"},{"location":"community/","title":"Community videos","text":"<p>As we are better to code than to explain, some youtubers already made videos for us !</p> <p> </p>"},{"location":"customshapes/","title":"Custom Shapes","text":"<p>Each button can be square, round, a rounded square, or a \"custom shape.\" A custom shape is a unique vector-based design composed of a single shell. However, rendering custom shapes is 50 times slower than basic ones, so they should be used sparingly. Using over 1,000 custom shapes can significantly reduce FPS.</p>"},{"location":"customshapes/#data","title":"Data","text":"<p>The shape is stored relative to the top-left coordinates.</p>"},{"location":"customshapes/#editor","title":"Editor","text":"<p>The editor appears when the \"Custom\" option is selected in the shape dropdown menu. You can undock the canvas from the attribute editor by clicking \u25a1.</p> <p> </p> <p>Pro tip: ctrl + click on tangent to manipulate it separatly.</p>"},{"location":"customshapes/#library","title":"Library","text":"<p>A common shape library is available clicking on the \"star +\" icon of the Advanced Editor's toolbar.</p> <p> </p>"},{"location":"download/","title":"Download","text":""},{"location":"download/#latest-releases","title":"Latest releases.","text":"GitHub Releases <ul>Loading...</ul>"},{"location":"hierarchy/","title":"Selection Hierarchy","text":"<p>You can set up a selection hierarchy. If a controller has children, double-clicking will select the shape along with all its descendants.</p> <p>By default, the viewport represents the hierarchy using arrows from the child to the parent. Strange? Not really! It might be unexpected, but this is the standard way to visualize hierarchy in a schematic representation. \ud83e\udd37</p> <p> </p> <p>You can turn off the display of these connections from the menu Edit &gt; Toggle Hierarchy Display or by pressing the <code>Y</code> shortcut.</p>"},{"location":"hierarchy/#multiple-shapes-creation","title":"Multiple Shapes Creation","text":"<p>The most easy way to create a hierarchy is to use the function: Add selection multiple buttons from the picker or the Advanced Editor.</p> <p> </p>"},{"location":"hierarchy/#edit-hierarchy","title":"Edit Hierarchy","text":"<p>To create a hierarchy from existing buttons, simply drag and drop one button onto another within the Advanced Editor canvas while holding the <code>ALT</code> key.</p> <p> </p>"},{"location":"hierarchy/#remove-hierarchy","title":"Remove Hierarchy","text":"<p>You can access the list of child IDs in the Advanced Editor's Attribute Editor, under the Shapes tab, in the Action section. Since the IDs can be difficult to interpret, selecting one will highlight the corresponding shape. You can delete connections by clicking the Delete button.</p> <p> </p> <p>If you want to massively break connections, you can use Clear Children on selected parent from the Advanced Editor right click menu.</p> <p> </p>"},{"location":"images/","title":"Relatives Images Paths","text":"<p>Despite the lacks of support for relative paths, similar to any other Maya path attribute, you can include environment variable in the path. Setting up a custom environment variable might be complexe. Therefore, we propose a default variable one: DWPICKER_PROJECT_DIRECTORY, available in the picker preferences window.</p> <p>If you configure DWPICKER_PROJECT_DIRECTORY=<code>c:/my_pickers</code> and you have an image with this path: <code>c:/my_pickers/my_character/background.png</code>, type this to make the path dynamic: <code>$DWPICKER_PROJECT_DIRECTORY/my_character/background.png</code> When you select a file from the UI, it automatically creates the path containing the variable.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#user-installation","title":"User installation","text":"<ul> <li>Unzip the dwpicker zip.</li> <li>Navigate through the dwpicker folder.</li> <li>Drag and drop the <code>drag_and_drop_to_maya_install.py</code> into maya viewport.  </li> </ul>"},{"location":"install/#installation-modes","title":"Installation modes","text":"<p>There are two different installation modes for the script:</p> <ul> <li>Into Maya's Scripts Folder</li> </ul> <p>This method copies the script into the user's script folder.</p> os path linux ~//maya/scripts windows \\Users\\\\Documents\\maya\\scripts mac os x ~/Library/Preferences/Autodesk/maya/scripts <p>This will generate a shelf button that uses the following startup command.</p> <pre><code>import dwpicker\ndwpicker.show()\n</code></pre> <ul> <li>From the Current Folder</li> </ul> <p>This method creates a button command in the selected shelf, pointing to the script's current location.</p> <p>Note: If you move the script from its current location, the shelf button will no longer work.</p>"},{"location":"layers/","title":"Visibility Layers","text":"<p>Such as the Maya's display layers, the picker contains a system to show and hide a group of buttons.</p>"},{"location":"layers/#create-a-layer","title":"Create a Layer","text":"<p>Layers can only be created from the Advanced Editor. To create a layer:</p> <ol> <li>Select a series of shapes.</li> <li>Right-click and choose \"Create Layer from Selection\".</li> <li>Enter a name in the dialog box.</li> </ol> <p>Once created, the visibility layer will be added to the Picker tab in the right panel, under the \"Visibility Layers\" section.</p> <p> </p> <p> </p>"},{"location":"layers/#switch-visibility","title":"Switch Visibility","text":"<p>The picker contains a menu to select visible layer.</p> <p> </p>"},{"location":"layers/#include-toggle-button","title":"Include Toggle Button","text":"<p>As it could be tidious to switch layer visibility you can add a button in the picker to toggle the visibilities.</p> <p> </p> <p>To achieve this, create a script button and use this python command:</p> <pre><code>import dwpicker\n\n# Show a layer\ndwpicker.set_layer_visible(\"name of the layer\", True)\n\n# Hide a layer\ndwpicker.set_layer_visible(\"name of the layer\", False)\n\n# Toggle visibility\ndwpicker.toggle_layer_visibility(\"name of the layer\")\n\n</code></pre>"},{"location":"namespace/","title":"Namespace customizations","text":""},{"location":"namespace/#customizing-namespace-listing","title":"Customizing Namespace Listing.","text":"<p>By default, the picker lists all namespaces present in the scene. However, in animation projects following a standard pipeline, a scene can include numerous namespaces unrelated to animable objects, such as sets, static assets, shaders, etc.</p> <p>This can be problematic for several reasons:</p> <ul> <li>Cluttered List: The namespace list becomes overwhelming due to unrelated entries.</li> <li>Nested Namespaces: Sometimes, namespaces are deeply nested and have excessively long names, making the list even harder to navigate.</li> </ul> <p> </p> <p>Since creating a universal system that handles all contexts and pipelines effectively is unrealistic, the default namespace listing method can be bypassed. You can pass a custom function to the <code>list_namespaces_function</code> argument of the <code>dwpicker.show</code> function. This allows you to define how namespaces are listed, tailoring the picker to better suit your specific pipeline or project needs.</p> <pre><code># Example of way to list only the namespaces starting with 'CHAR_'\n\nfrom maya import cmds\nimport dwpicker\n\ndef list_character_namespaces() -&gt; List[str]:\n    \"\"\"\n    Return the items as string which will populate the namespace combo.\n    \"\"\"\n    namespaces = cmds.namespaceInfo(listOnlyNamespaces=True, recurse=True)\n    return [ns for ns in namespaces if ns.startswith('CHAR_')]\n\n\ndwpicker.show(list_namespaces_function=list_character_namespaces)\n\n</code></pre>"},{"location":"namespace/#manage-nested-namespaces","title":"Manage nested namespaces.","text":"<p>By default, the picker is designed to operate with only one root namespace per picker. Managing nested or multiple namespaces is not supported out-of-the-box, as implementing such functionality would require imposing specific naming conventions\u2014something many studios may not be able to accommodate.</p> <p>Since the picker must remain agnostic and usable across diverse pipelines and workflows, its default behavior is intentionally kept simple. Default Behavior:</p> <ul> <li>When switching the namespace, the picker applies the selected namespace to all targets within the picker.</li> <li>It does not distinguish between or manage nested namespaces automatically.</li> </ul> <p>Many studios use setups where rigs are combined via references in a buffer file. This results in scenes with multiple nested namespaces for a single picker. In such cases, the picker may not inherently support the granularity required to handle these nested namespaces effectively.</p> <p>To customize that process, you can write your own function to rename a target that picker will use: <code>replace_namespace_function</code> argument of the <code>dwpicker.show</code>.</p> <pre><code>\ndef preserve_nested_namespaces(target: str, namespace: str) -&gt; str:\n    if not root_namespace:\n        return target\n\n    if target.count(':') &lt;= 1:\n        return f'{namespace}:{target.split(':')[-1]}\n\n    target = ':'.join(target.split(':')[1:])\n    return f'{target}:{namespace}\n\n\ndwpicker.show(replace_namespace_function=list_character_namespaces)\n</code></pre>"},{"location":"overlays/","title":"Overlay Buttons","text":"<p>It is possible to create buttons that remain overlaid on top of the picker.</p> <p> </p>"},{"location":"overlays/#setup","title":"Setup","text":"<p>Within the Advanced Editor's Attribute Editor, navigate to the Shapes tab and locate the Shape section. Set the option to Space to Screen. The anchor attributes specify the docking corner where you want to position the button relative to its container. The canvas serves as a guide to assist with placement.\"</p> <p> </p> <p>Note: Marking a shape as screen space does not affect stack evaluation. A screen space shape can be drawn behind a world space one and does not enforce an overlay.</p>"},{"location":"panels/","title":"Multiple Panels","text":"<p>The Multipanel feature allows you to split the Picker into multiple viewports. However, this change is only visible in the Picker View\u2014the Canvas will still display all shapes as part of the same document.</p> <p>Once the multipanel picker is set up, you can toggle between a split viewport and sub-tabs for display. The configuration lets you set a default view, but users can still switch between the two modes interactively.</p>"},{"location":"panels/#setup","title":"Setup","text":"<p>Setting up the panels must be done in the Picker tab within the Advanced Editor, under the Picker Panels section.</p> <p> </p>"},{"location":"panels/#switch-display","title":"Switch Display","text":"<p>To dynamically switch between split viewports and sub-tabs, go to Edit &gt; Toggle Panel Display Mode or press <code>T</code>.</p> <p>If the Namespace Toolbar is visible, you can also use the toggle buttons to switch modes.</p> <p> </p>"},{"location":"panels/#isolate-shapes","title":"Isolate Shapes","text":"<p>In the Advanced Editor, you can isolate a panel to keep the canvas clean.</p> <p> </p>"},{"location":"panels/#assign-shapes-to-panel","title":"Assign Shapes to Panel","text":""},{"location":"scripts/","title":"Scripts","text":""},{"location":"scripts/#reload-picker","title":"Reload Picker","text":"<p>A developper hack to reload the Dreamwall picker without having to restart Maya each time.</p> <pre><code># If the picker is not in a known PYTHONPATH.\nimport sys\nsys.path.insert(0, \"&lt;dwpicker path&gt;\")\n\n# Code to clean modules and relaunch a Dreamwall picker with updated code.\ntry:\n    # Important step to not let some callbacks left behind.\n    dwpicker.close()\nexcept:\n    pass\n\nfor module in list(sys.modules):\n    if \"dwpicker\" in module:\n        print(\"deleted: \" + module)\n        del sys.modules[module]\n\nimport dwpicker\ndwpicker.show()\n</code></pre>"},{"location":"scripts/#create-buttons-to-picker-programmaticaly","title":"Create buttons to picker programmaticaly.","text":"<pre><code>from maya import cmds\nimport dwpicker\nfrom dwpicker.templates import BUTTON\n\n\ndef add_button(options, refresh_ui=True):\n    \"\"\"\n    @param dict options:\n        This is a dictionnary of the shape options. List of possible options\n        are can be found here dwpicker.templates.BUTTON\n        (too much very many long to be documented here ;) )\n    @param bool refresh_ui:\n        this update the ui. Can be disabled for loop purpose.\n    \"\"\"\n    button = BUTTON.copy()\n    button.update(options)\n    picker = dwpicker.current()\n    if picker is None:\n        cmds.warning('No picker found')\n        return\n\n    picker.document.add_shapes([button])\n\n    if refresh_ui:\n        picker.document.changed.emit()\n\n\noptions = {\n    'text.content': 'Button',\n    'shape.left': 250,\n    'shape.top': 150,\n    'shape.width': 120.0,\n    'shape.height': 25.0,\n}\nadd_button(options)\n</code></pre>"},{"location":"scripts/#embeb-custom-picker-widget","title":"Embeb custom picker widget.","text":"<p>Example for a TD who wants to include a picker in a custom UI: This is the simplest possible setup to make it functional without relying on the main application.</p> <pre><code>import json\nfrom dwpicker.interactive import Shape\nfrom dwpicker.document import PickerDocument\nfrom dwpicker.picker import PickerStackedView\nfrom dwpicker.qtutils import set_shortcut\nfrom PySide2 import QtCore\n\nwith open('-picker_file_path-', 'r') as f:\n    data = json.load(f)\ndocument = PickerDocument(data)\nview = PickerStackedView(document=document editable=False)\nview.register_callbacks()\nview.setWindowFlags(QtCore.Qt.Tool)\nview.reset()\nset_shortcut('F', view, view.reset)\n\nview.show()\n</code></pre>"},{"location":"support/","title":"Support","text":""},{"location":"support/#support","title":"Support","text":"<p>Preferably, post an issue on the github page.</p> <p>If you don't hold a github account, you can send a mail to <code>brouyere |a| dreamwall.be</code>.Please start you mail subjects by [dwpicker]. (Note that the replying delay can be longer using that way).</p>"}]}